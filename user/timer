#! /bin/sh -
# 
# min="${1-}"
# sec="${2-}"
# 
# if [ -z "${min}" ] || [ -z "${sec}" ] || [ -n "${3-}" ] ; then
# 	printf '%s\n' "Usage: ${0-} MIN SEC"
# 	exit 1
# fi
# 
# print_as_minutes () {
# 	_total_sec="${1}"
# 	min="$((_total_sec / 60))"
# 	sec="$((_total_sec % 60))"
# 	echo "$min $sec" > /scoreboard/current_user_time
# 	clear -x
# 	n_lines="$(($(stty size | cut -d " " -f 1)))"
# 	n_cols="$(($(stty size | cut -d " " -f 2)))"
# 	while [ "${n_lines}" -ge "0" ] ; do
# 		printf '\n'
# 		n_lines="$((n_lines - 1))"
# 	done
# 	figlet -w $n_cols -l "${min} : ${sec}"
# }
# 
# total_sec="$((min * 60 + sec))"
# while [ "${total_sec}" -ge "0" ] ; do
# 	print_as_minutes "${total_sec}"
# 	sleep 1s
# 	total_sec="$((total_sec - 1))"
# done

print_as_minutes() {
    _total_sec="$1"
    min="$((_total_sec / 60))"
    sec="$((_total_sec % 60))"
    echo "$min $sec" > /scoreboard/current_user_time
    clear -x
    n_lines="$(($(stty size | cut -d " " -f 1) / 2 - 3))"
    n_cols="$(($(stty size | cut -d " " -f 2)))"
    while [ "${n_lines}" -ge "0" ]; do
        printf '\n'
        n_lines="$((n_lines - 1))"
    done
    figlet -c -t -w $n_cols "${min} : ${sec}"
}

# Initialize total seconds
total_sec=0

# Infinite loop to simulate a stopwatch
while :; do
    print_as_minutes "${total_sec}"
    sleep 1s
    total_sec="$((total_sec + 1))"
# Initialize total seconds
total_sec=0

# Infinite loop to simulate a stopwatch
while :; do
    print_as_minutes "${total_sec}"
    sleep 1s
    total_sec="$((total_sec + 1))"
done
